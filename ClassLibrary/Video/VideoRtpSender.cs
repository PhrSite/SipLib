/////////////////////////////////////////////////////////////////////////////////////
//  File:   VideoRtpSender.cs                                       17 Apr 24 PHR
/////////////////////////////////////////////////////////////////////////////////////

using SipLib.Rtp;

namespace SipLib.Video;

/// <summary>
/// Delegate type for a function that sends an RTP packet. Used for the H264RtpSender class when
/// an RTP packet needs to be sent.
/// </summary>
/// <param name="rtpPckt">RTP packet to send</param>
public delegate void RtpSendDelegate(RtpPacket rtpPckt);

/// <summary>
/// Base class for classes that need to send encoded video frames using RTP.
/// </summary>
public class VideoRtpSender
{
    /// <summary>
    /// The RTP packet sequence number
    /// </summary>
    protected ushort SequenceNumber = 0;

    /// <summary>
    /// The RTP packet Timestamp field
    /// </summary>
    protected uint Timestamp = 0;
    
    /// <summary>
    /// The RTP packet SSRC field. This is randomly generated by this base class.
    /// </summary>
    protected uint SSRC = 0;

    /// <summary>
    /// The RTP packet payload type field.
    /// </summary>
    protected int PayloadType = 0;
    
    /// <summary>
    /// The amount to increment the Timestamp field when a full frame's worth of RTP packets have been sent.
    /// </summary>
    protected uint TimestampIncrement = 0;
    
    /// <summary>
    /// Function to call to send the RTP packet.
    /// </summary>
    protected RtpSendDelegate RtpSender;

    private const uint VIDEO_CLOCK_RATE = 90000;
    private static Random m_Rnd = new Random();

    /// <summary>
    /// The maximum RTP packet payload size to send
    /// </summary>
    protected const int MAX_RTP_PAYLOAD = 1200;

    /// <summary>
    /// Constructor
    /// </summary>
    /// <param name="payloadType">The negotiated RTP packet payload type</param>
    /// <param name="frameRate">The frame rate in frames per second.</param>
    /// <param name="sender">Delegate function to use to send RTP packets</param>
    public VideoRtpSender(int payloadType, uint frameRate, RtpSendDelegate sender)
    {
        PayloadType = payloadType;
        TimestampIncrement = VIDEO_CLOCK_RATE / frameRate;
        RtpSender = sender;
        SSRC = Convert.ToUInt32(m_Rnd.Next());
    }

    /// <summary>
    /// Derived classes must override this method to send the encoded video frame in RTP packets. The packetization
    /// algorithm depends upon the video encoder type.
    /// </summary>
    /// <param name="encodedFrame">The encoded video frame to send.</param>
    public virtual void SendEncodedFrame(byte[] encodedFrame)
    {
    }

    /// <summary>
    /// Sends a single RTP packet
    /// </summary>
    /// <param name="payload"></param>
    /// <param name="markerBit"></param>
    protected void SendRtpPacket(byte[] payload, bool markerBit)
    {
        RtpPacket rtpPacket = new RtpPacket(payload.Length);
        rtpPacket.SSRC = SSRC;
        rtpPacket.SequenceNumber = SequenceNumber;
        rtpPacket.Timestamp = Timestamp;
        rtpPacket.Marker = markerBit;
        rtpPacket.PayloadType = PayloadType;
        rtpPacket.Payload = payload;
        RtpSender?.Invoke(rtpPacket);

        SequenceNumber += 1;
    }
}
